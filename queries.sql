/**
 * Project: Gamer payment analytics
 * Author: Giuler Gashimova (https://github.com/giulerg)
 * Description: This script calculates key metrics: MRR, ARPPU, Expansion MRR, Contraction MRR, LT,  LTV
 * Database: PostgreSQL
 * Tables: project.games_payment, project.games_paid_users
 * 
 */


-- Monthly Recurring Revenue (MRR)
-- Only for active recurring customers
WITH user_month_sums AS (
 	SELECT 
 		gp.user_id, 
 		DATE_TRUNC('month', payment_date::date) AS month_year,
 		SUM(gp.revenue_amount_usd) AS amount
 	FROM project.games_payments gp
 	GROUP BY gp.user_id, month_year
), 
prev_current_months AS ( 
	SELECT user_id, 
	month_year, 
	amount, 
	LAG(month_year) OVER (PARTITION BY user_id ORDER BY month_year) AS  prev_month
	FROM user_month_sums g
)
SELECT
	TO_CHAR(month_year, 'mm-yyyy'),
	ROUND(SUM(amount::numeric), 2) AS mrr
FROM prev_current_months
WHERE prev_month IS NOT NULL
	 AND month_year = prev_month + INTERVAL '1 month'
GROUP BY month_year;


 -- Paid Users 
 -- The number of users who made a payment
SELECT 
	COUNT(DISTINCT gp.user_id) AS paid_users
FROM project.games_payments gp;


-- Average Revenue Per Paid User (ARPPU)
-- 
SELECT 
	ROUND(SUM(gp.revenue_amount_usd::numeric) / NULLIF(COUNT(DISTINCT gp.user_id), 0), 2) AS arppu
FROM project.games_payments gp;


-- New Paying Users 
-- Users who made their first payment in the month
WITH user_month_sums AS (
	SELECT 
		gp.user_id,
		DATE_TRUNC('month', payment_date::date) AS month_year,
		SUM(gp.revenue_amount_usd)
	FROM project.games_payments gp 
	GROUP BY gp.user_id, month_year
),
prev_current_months AS (
	SELECT 
		user_id,
		month_year,
		LAG(month_year) OVER (PARTITION BY user_id ORDER BY month_year) AS prev_month
	FROM user_month_sums
)
SELECT
	TO_CHAR(month_year, 'mm-yyyy') AS month, 
	count(*) AS count_new_users
FROM prev_current_months
WHERE prev_month IS NULL
GROUP BY month_year


-- New MRR 
-- Revenue generated by new users
WITH user_month_sums AS (
	SELECT 
		gp.user_id,
		DATE_TRUNC('month', payment_date::date) AS month_year,
		SUM(gp.revenue_amount_usd) AS amount
	FROM project.games_payments gp 
	GROUP BY gp.user_id, month_year
), prev_current_months AS (SELECT 
	user_id, 
	month_year,
	LAG (month_year) OVER (PARTITION BY user_id ORDER BY month_year) AS prev_month,
	amount
FROM user_month_sums u)

SELECT 
	TO_CHAR(month_year, 'mm-yyyy'),
	ROUND(SUM(amount::numeric), 2) AS NEw_MRR
FROM prev_current_months p
WHERE p.prev_month IS NULL
GROUP BY month_year

-- Churned  Users 
-- Users who made their last payment in the month
WITH user_month_sums AS (
	SELECT 
		gp.user_id,
		DATE_TRUNC('month', payment_date::date) AS month_year,
		SUM(gp.revenue_amount_usd)
	FROM project.games_payments gp 
	GROUP BY gp.user_id, month_year
),
next_current_months AS (
	SELECT 
		user_id,
		month_year,
		LEAD(month_year) OVER (PARTITION BY user_id ORDER BY month_year) AS next_month,
		m.last_month AS last_month
	FROM user_month_sums
	CROSS JOIN (
		SELECT  
			MAX(month_year) AS last_month 
		FROM user_month_sums
	) AS m
)
SELECT
	count(*)
FROM next_current_months
WHERE next_month IS NULL AND last_month != month_year


--Churn Rate
-- Churned users /  paid users
WITH user_month_sums AS (
	SELECT 
		gp.user_id,
		DATE_TRUNC('month', payment_date::date) AS month_year,
		SUM(gp.revenue_amount_usd)
	FROM project.games_payments gp 
	GROUP BY gp.user_id, month_year
),
next_current_months AS (
	SELECT 
		user_id,
		month_year,
		LEAD(month_year) OVER (PARTITION BY user_id ORDER BY month_year) AS next_month,
		m.last_month AS last_month
	FROM user_month_sums
	CROSS JOIN (
		SELECT  
			MAX(month_year) AS last_month 
		FROM user_month_sums
	) AS m
), 
churning_users AS (
	SELECT
		month_year, count(*) AS users
	FROM next_current_months
	WHERE next_month IS NULL AND last_month != month_year
	GROUP BY month_year
), 
paid_users AS (
	SELECT month_year, count(*) AS users
	FROM user_month_sums
	GROUP BY month_year
)

SELECT 
	TO_CHAR(c.month_year, 'mm-yyyy') AS month, 
	ROUND(c.users::numeric/ p.users * 100, 2) AS churn_rate
FROM churning_users c
JOIN paid_users p ON c.month_year = (p.month_year + INTERVAL '1 month')
ORDER BY c.month_year


--Churned Revenue
WITH user_month_sums AS (
	SELECT 
		gp.user_id,
		DATE_TRUNC('month', payment_date::date) AS month_year,
		SUM(gp.revenue_amount_usd) AS amount
	FROM project.games_payments gp 
	GROUP BY gp.user_id, month_year
),
next_current_months AS (
	SELECT 
		user_id,
		month_year,
		LEAD(month_year) OVER (PARTITION BY user_id ORDER BY month_year) AS next_month,
		amount,
		m.last_month AS last_month
	FROM user_month_sums
	CROSS JOIN (
		SELECT  
			MAX(month_year) AS last_month 
		FROM user_month_sums
	) AS m
)
SELECT
	 ROUND(SUM(amount::numeric), 2) AS churned_revenue,
	 TO_CHAR(month_year, 'mm-yyyy') AS month
FROM next_current_months
WHERE next_month IS NULL AND last_month != month_year
GROUP BY month_year


-- Revenue Churn Rate
WITH user_month_sums AS (
	SELECT 
		gp.user_id,
		DATE_TRUNC('month', payment_date::date) AS month_year,
		SUM(gp.revenue_amount_usd) AS amount
	FROM project.games_payments gp 
	GROUP BY gp.user_id, month_year
),

next_current_months AS (
	SELECT 
		user_id,
		month_year,
		LEAD(month_year) OVER (PARTITION BY user_id ORDER BY month_year) AS next_month,
		amount,
		m.last_month AS last_month
	FROM user_month_sums
	CROSS JOIN (
		SELECT  
			MAX(month_year) AS last_month 
		FROM user_month_sums
	) AS m
), 

churned_revenue AS (
	SELECT	 
		SUM(amount) AS churned_revenue,
		month_year
	FROM next_current_months
	WHERE next_month IS NULL AND last_month != month_year
	GROUP BY month_year),
	
prev_current_months AS (
	SELECT 
		user_id, 
		month_year, 
		amount, 
		LAG(month_year) OVER (PARTITION BY user_id ORDER BY month_year) AS  prev_month
	FROM user_month_sums g
), 

mrr AS (
	SELECT
		month_year,
		SUM(amount) AS mrr 
	FROM prev_current_months
	WHERE prev_month IS NOT NULL
		AND month_year = prev_month + INTERVAL '1 month'
	GROUP BY month_year) 

SELECT 
	TO_CHAR(c.month_year, 'mm-yyyy') AS month,
	ROUND((c.churned_revenue / m.mrr *100.0)::numeric, 2) AS revenue_churn
FROM churned_revenue c
JOIN mrr m ON m.month_year = (c.month_year - INTERVAL '1 month')


-- Expansion MRR
WITH user_month_sums AS (
	SELECT 
		gp.user_id,
		DATE_TRUNC('month', payment_date::date) AS month_year,
		SUM(gp.revenue_amount_usd) AS amount
	FROM project.games_payments gp 
	GROUP BY gp.user_id, month_year
),
prev_current_months AS (
	SELECT user_id, 
	month_year, 
	amount, 
	LAG(month_year) OVER (PARTITION BY user_id ORDER BY month_year) AS  prev_month,
	LAG(amount) OVER (PARTITION BY user_id ORDER BY month_year) AS  prev_sum
	FROM user_month_sums g

),
differences AS (
	SELECT
		month_year,
		(CASE WHEN amount - prev_sum > 0 THEN  amount - prev_sum ELSE  0 END) AS expansion_mrr
		
	FROM prev_current_months
	WHERE amount > prev_sum OR prev_sum IS NULL
)
SELECT 
	TO_CHAR(month_year, 'mm-yyyy'),
	ROUND(SUM(expansion_mrr::numeric), 2) AS expansion_mrr
FROM differences
GROUP BY month_year
ORDER BY month_year


--Contraction  MRR
WITH user_month_sums AS (
	SELECT 
		gp.user_id,
		DATE_TRUNC('month', payment_date::date) AS month_year,
		SUM(gp.revenue_amount_usd) AS amount
	FROM project.games_payments gp 
	GROUP BY gp.user_id, month_year
),
prev_current_months AS (
	SELECT user_id, 
	month_year, 
	amount, 
	LAG(month_year) OVER (PARTITION BY user_id ORDER BY month_year) AS  prev_month,
	LAG(amount) OVER (PARTITION BY user_id ORDER BY month_year) AS  prev_sum
	FROM user_month_sums g

),
differences AS (
	SELECT
		month_year,
		(CASE WHEN amount - prev_sum < 0 THEN prev_sum - amount ELSE  0 END) AS smallimg_mrr
		
	FROM prev_current_months
	WHERE amount < prev_sum OR prev_sum IS NULL
)
SELECT 
	TO_CHAR(month_year, 'mm-yyyy'),
	ROUND(SUM(smallimg_mrr::numeric), 2) AS smallimg_mrr
FROM differences
GROUP BY month_year
ORDER BY month_year


--Customer Lifetime (LT)
--Average number in days
WITH user_days AS 
(
	SELECT 
		user_id,
		MIN(payment_date) AS start_date,
		MAX(payment_date) AS end_date
	FROM project.games_payments
	GROUP BY user_id
)
SELECT 
	 ROUND(AVG(EXTRACT(DAY FROM (end_date::timestamp  - start_date::timestamp))+1), 2) AS LT
FROM user_days


-- Customer Lifetime Value (LTV)
WITH user_cte AS (
	SELECT 
		user_id,
		MIN(payment_date) AS date_start,
		MAX(payment_date) AS date_end,
		AVG(revenue_amount_usd) AS avg_amount
	FROM project.games_payments  
	GROUP BY  user_id
)  
SELECT 
    ROUND(AVG((EXTRACT(DAY FROM (date_end::timestamp  - date_start::timestamp)) + 1) * avg_amount), 2) AS ltv 
FROM user_cte
 